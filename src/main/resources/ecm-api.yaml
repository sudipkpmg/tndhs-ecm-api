openapi: 3.0.2
info:
  title: ecm_api
  version: 1.0.0
  description: ECM API for users
servers:
  - url: '/ecm-api/v1'
paths:
  /create_folder:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderCreationRequest'
        required: true
      responses:
        '201':
          description: Successfully created new folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderCreationSuccessResponse'
        '400':
          description: Some of the parameters are missing or not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '403':
          description: User does not have the required access to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '404':
          description: 'The parent folder could not be found, or the authenticated user does not have access to the parent folder.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '409':
          description: The folder is locked or the folder already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
  /get_file/{fileId}:
    get:
      description: Get file
      parameters:
        - in: path
          name: fileId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A binary file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '202':
          description: File is not ready to be downloaded.
          content:
            application/json:
              schema:
                type: string
          headers:
            Retry-After:
              schema:
                type: integer
              description: Time in seconds after which the file will be available for the client to download.
        '404':
          description: File not found
          content:
            application/json:
              schema:
                type: string
  /download_file:
    post:
      description: Get file
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileDownloadRequest'
        required: true
      responses:
        '200':
          description: A binary file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '202':
          description: File is not ready to be downloaded.
          content:
            application/json:
              schema:
                type: string
          headers:
            Retry-After:
              schema:
                type: integer
              description: Time in seconds after which the file will be available for the client to download.
        '404':
          description: File not found
          content:
            application/json:
              schema:
                type: string
  /upload_file:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadData'
        required: true
      responses:
        '200':
          description: Document ID of uploaded content is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
        '400':
          description: Folder error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
        '409':
          description: File exists error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
  /search:
    post:
      description: Get file
      requestBody:
        description: query for file or folder
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        '200':
          description: File or Folder obtained
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
components:
  schemas:
    FolderCreationRequest:
      title: Request object body for folder creation
      type: object
      properties:
        citizen_metadata:
          $ref: '#/components/schemas/CitizenMetadata'
    FolderCreationSuccessResponse:
      title: Response for successful folder creation
      type: object
      properties:
        id:
          type: string
          description: The unique identifier that represents the folder.
    UploadFileResponse:
      title: Response for successful file upload
      type: object
      properties:
        Status:
          type: string
          description: Status message for operation
        FileId:
          type: string
          description: File ID of uploaded content
    ClientError:
      title: Generic error
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error description
    CitizenMetadata:
      title: Citizen metadata
      type: object
      properties:
        logon_user_id:
          type: string
        mpi_id:
          type: string
        sys_id:
          type: string
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
        dob:
          type: string
          description: Date of birth
          format: date
        ssn4:
          type: string
          description: Last 4 digits of SSN
          pattern: "\\d{4}"
    FileDownloadRequest:
      type: object
      properties:
        fileId:
          type: string
    FileUploadData:
      type: object
      properties:
        boxFolderId:
          type: string
        file:
          type: string
          format: binary
    Query:
      title: Search criterion
      type: object
      properties:
        fileName:
          type: string
        folderId:
          type: string
        searchType:
          type: string
          enum:
            - file
            - folder
        offset:
          type: integer
          default: 0
          example: 0
        limit:
          type: integer
          default: 20
          example: 20
    FileDownloadData:
      title: File content
      type: object
      properties:
        file:
          type: string
          format: binary
    SearchResult:
      title: Search Response
      type: object
      properties:
        complete:
          type: string
          enum:
            - true
            - false
        data:
          $ref: '#/components/schemas/FileArray'
    FileArray:
      title: Array of files
      type: array
      items:
        $ref: '#/components/schemas/FileInfo'
    FileInfo:
      type: object
      properties:
        fileId:
          type: string
        fileName:
          type: string
        citizenMetadata:
          $ref: '#/components/schemas/CitizenMetadata'
